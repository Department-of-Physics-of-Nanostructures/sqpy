name: Test, build and publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # test:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #       python-version: ["3.8", "3.9", "3.10", "3.11"]

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Set Up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Dependencies
  #       run: |
  #         python -m pip install --root-user-action=ignore --upgrade pip
  #         pip install --root-user-action=ignore -r requirements.txt

  #     - name: Run PyTest
  #       run: |
  #         pip install --root-user-action=ignore pytest pytest-cov
  #         pytest

  deploy:
    # needs: test
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get version from pyproject.toml
        run: |
          VERSION=$(awk -F'=' '/^version/ {gsub(/[" ]/, "", $2); print $2}' pyproject.toml)
          echo "Version is $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get package name from pyproject.toml
        run: |
          PACKAGE_NAME=$(awk -F'=' '/^name/ {gsub(/[" ]/, "", $2); print $2}' pyproject.toml)
          echo "PACKAGE_NAME is $PACKAGE_NAME"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Get latest release version from PyPI
        run: |
          PUBLISHED_VERSION=$(curl "https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json" | jq -r '.info.version')
          echo "Latest PyPI version is $PUBLISHED_VERSION"
          echo "PUBLISHED_VERSION=$PUBLISHED_VERSION" >> $GITHUB_ENV

      - name: Compare versions
        run: |
          if [ "${{ env.PUBLISHED_VERSION }}" != "${{ env.VERSION }}" ]; then
            PUBLISHING="true"
          else
            PUBLISHING="false"
          fi
          echo "PUBLISHING is $PUBLISHING"
          echo "PUBLISHING=$PUBLISHING" >> $GITHUB_ENV

      - name: Set up Python
        if: env.PUBLISHING == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Build package
        if: env.PUBLISHING == 'true'
        run: python -m pip install --upgrade pip && pip install build && python -m build

      - name: Publish package distributions to PyPI
        if: env.PUBLISHING == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
